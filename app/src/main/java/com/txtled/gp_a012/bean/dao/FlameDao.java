package com.txtled.gp_a012.bean.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.txtled.gp_a012.bean.Flame;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FLAME".
*/
public class FlameDao extends AbstractDao<Flame, Long> {

    public static final String TABLENAME = "FLAME";

    /**
     * Properties of entity Flame.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property LightStatue = new Property(1, int.class, "lightStatue", false, "LIGHT_STATUE");
        public final static Property Light = new Property(2, int.class, "light", false, "LIGHT");
        public final static Property Power = new Property(3, int.class, "power", false, "POWER");
        public final static Property Speed = new Property(4, int.class, "speed", false, "SPEED");
        public final static Property ToMusic = new Property(5, int.class, "toMusic", false, "TO_MUSIC");
    }


    public FlameDao(DaoConfig config) {
        super(config);
    }
    
    public FlameDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FLAME\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"LIGHT_STATUE\" INTEGER NOT NULL ," + // 1: lightStatue
                "\"LIGHT\" INTEGER NOT NULL ," + // 2: light
                "\"POWER\" INTEGER NOT NULL ," + // 3: power
                "\"SPEED\" INTEGER NOT NULL ," + // 4: speed
                "\"TO_MUSIC\" INTEGER NOT NULL );"); // 5: toMusic
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FLAME\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Flame entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getLightStatue());
        stmt.bindLong(3, entity.getLight());
        stmt.bindLong(4, entity.getPower());
        stmt.bindLong(5, entity.getSpeed());
        stmt.bindLong(6, entity.getToMusic());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Flame entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getLightStatue());
        stmt.bindLong(3, entity.getLight());
        stmt.bindLong(4, entity.getPower());
        stmt.bindLong(5, entity.getSpeed());
        stmt.bindLong(6, entity.getToMusic());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Flame readEntity(Cursor cursor, int offset) {
        Flame entity = new Flame( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // lightStatue
            cursor.getInt(offset + 2), // light
            cursor.getInt(offset + 3), // power
            cursor.getInt(offset + 4), // speed
            cursor.getInt(offset + 5) // toMusic
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Flame entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setLightStatue(cursor.getInt(offset + 1));
        entity.setLight(cursor.getInt(offset + 2));
        entity.setPower(cursor.getInt(offset + 3));
        entity.setSpeed(cursor.getInt(offset + 4));
        entity.setToMusic(cursor.getInt(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Flame entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Flame entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Flame entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
